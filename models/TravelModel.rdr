Model TravelModel;

//Objectives

Objective Max ENBEmissions = EV(NBEmissions);
Objective Min LPEmissions = Pr(NBEmissions<0);

Objective Max ENBValueOfTravel = EV(NBValueOfTravel);
Objective Min LPEValueOfTravel = Pr(NBValueOfTravel < 0);

NBEmissions = NewEmissions - CurrentEmissions;
NBValueOfTravel = ValueOfTravel - ValueNoTravel;

//Parameters

CapNbrFlights = 5;
CapKilometers = 5000;	//Per person/academic year

NbrParticipants = 12;

//Distances expressed in km

DistanceShortHaul = normalCI(500,4000);	
DistanceLongHaul = normalCI(4000,10000);

CO2ShortHaul	= 0.1676;
CO2LongHaul	= 0.19066;

//Modelling Distance

CurrentDistance =  (DistanceShortHaul*CurrentNbrShortHaul) + (DistanceLongHaul*CurrentNbrLongHaul);

NewDistanceShortHaul 	= DistanceShortHaul * NbrShortHaul;
NewDistanceLongHaul 	= DistanceLongHaul * NbrLongHaul;
NewDistance 		= NewDistanceShortHaul + NewDistanceLongHaul;

//Modelling Emissions

CurrentEmissions = (DistanceShortHaul*CurrentNbrShortHaul*CO2ShortHaul) + (DistanceLongHaul*CurrentNbrLongHaul*CO2LongHaul);

NewEmissionsShortHaul = NewDistanceShortHaul * CO2ShortHaul;
NewEmissionsLongHaul = NewDistanceLongHaul * CO2LongHaul;
NewEmissions = NewEmissionsShortHaul + NewEmissionsLongHaul;

//Decisions
CurrentNbrFlights = deterministic(29);

NewNbrFlights = decision("Policy type") {
	"As-is": 		deterministic(1);
	"Cap distance": 	normalCI(0.75, 1);
	"Carbon tax/flight": 	normalCI(0.6, 0.9);
	"Carbon tax/distance":	normalCI(0.5, 0.8); 
}

CurrentNbrShortHaul = 25;
CurrentNbrLongHaul = 4;

PropShortHaul = CurrentNbrShortHaul / CurrentNbrFlights;
PropLongHaul = 1 - PropShortHaul;

NbrShortHaul = NewNbrFlights * (PropShortHaul * ImpactShortHaul);
NbrLongHaul = NewNbrFlights - NbrShortHaul;

ImpactShortHaul = decision("Policy type") {
	"As-is": 		deterministic(1);
	"Cap distance": 	normalCI(0.95,1.05);
	"Cap number flights": 	normalCI(0.8,1);
	"Carbon tax/flight": 	normalCI(0.8,1);
	"Carbon tax/distance": 	normalCI(0.9,1.1);
}

ValueOfTravel = ValueEventSize + ValueEventFrequency + ValueEventRelevance + ValuePreviousAttendance + ValueIsPresenting;

ValueNoTravel = normalCI(0,1);

ValueEventSize = decision("Event details") {
	"Conference": normalCI(0.6,0.9);
	"Meetings": normalCI(0.5,0.8);
	"Workshop": normalCI(0.4,0.7);
}

//Per year
ValueEventFrequency = decision("Event frequency") {
	"Low": normalCI(0.7,0.9);
	"Medium": normalCI(0.5,0.7);
	"High": normalCI(0.4,0.7);
}

ValueEventRelevance = decision("Event relevance") {
	"High": normalCI(0.7,0.9);
	"Medium": normalCI(0.6,0.7);
	"Low": normalCI(0.2,0.4);
}

ValuePreviousAttendance = decision("Previous attendance") {
	"Low": normalCI(0.6,0.9);
	"Medium": normalCI(0.5,0.7);
	"High": normalCI(0.4,0.6);
}

ValueIsPresenting = decision("Is presenting") {
	"Yes": normalCI(0.8,1);
	"No": normal(0.5,0.8);
}






